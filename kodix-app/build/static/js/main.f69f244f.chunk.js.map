{"version":3,"sources":["logo.svg","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","state","data","update","brand","model","price","status","milage","id","list","this","setState","console","log","map","item","key","onClick","delProduct","name","onChange","event","changeBrand","type","value","save","fetch","updateList","res","json","product_list","e","target","preventDefault","j","JSON","stringify","body","method","js","alert","React","Component","App","page","loadData","className","response","changeState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f69f244f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {data: [], update: 0, brand: \"\", model: \"\", price: 0, status:0, milage:0, id:null}\r\n\r\n\r\n    }\r\n    componentWillMount(){\r\n        let list = this.props.data;\r\n        this.setState({data: list});\r\n        console.log(list)\r\n    }\r\n    render() {\r\n        return(\r\n        <div>\r\n            <table>\r\n            <thead>\r\n            <tr>\r\n                <th>ID</th>\r\n                <th>Бренд</th>\r\n                <th>Модель</th>\r\n                <th>Цена</th>\r\n                <th>Статус</th>\r\n                <th>Пробег</th>\r\n                <th>Удалить</th>\r\n            </tr>\r\n            </thead>\r\n                <tbody>\r\n                {this.state.data.map((item)=>(\r\n                    <tr key={item.id+this.state.update}>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.brand}</td>\r\n                        <td>{item.model}</td>\r\n                        <td>{item.price}</td>\r\n                        <td>{item.status}</td>\r\n                        <td>{item.milage}</td>\r\n                        <td onClick={()=>this.delProduct(item.id)}>X</td>\r\n                    </tr>\r\n                ))}\r\n\r\n\r\n                </tbody>\r\n            </table>\r\n            <h1>TEST CREATE</h1>\r\n            <form>\r\n                <label>Бренд<input name={\"brand\"}  onChange={(event)=>this.changeBrand(event, \"brand\")}/></label>\r\n                    <br/>\r\n                <label>Модель<input name={\"model\"}  onChange={(event)=>this.changeBrand(event, \"model\")}/></label>\r\n                    <br/>\r\n                <label>Прайс<input name={\"price\"}  onChange={(event)=>this.changeBrand(event, \"price\")}/></label>\r\n                    <br/>\r\n                <label>Статус<input type={\"radio\"} name={\"status\"} value={\"0\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    В пути  <input type={\"radio\"} name={\"status\"} value={\"1\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    На складе<input type={\"radio\"} name={\"status\"} value={\"2\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    Продан<input type={\"radio\"} name={\"status\"} value={\"3\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    Снят с продажи\r\n                </label>\r\n                    <br/>\r\n                <label>Пробег<input name={\"milage\"} onChange={(event)=>this.changeBrand(event, \"milage\")}/></label>\r\n                    <br/>\r\n                    <button onClick={(event)=>this.save(event)}>Сохранить</button>\r\n            </form>\r\n            <h1>TEST UPDATE</h1>\r\n            <form>\r\n                <label>ID<input name={\"id\"}  onChange={(event)=>this.changeBrand(event, \"id\")}/></label>\r\n                <br/>\r\n                <label>Бренд<input name={\"brand\"}  onChange={(event)=>this.changeBrand(event, \"brand\")}/></label>\r\n                <br/>\r\n                <label>Модель<input name={\"model\"}  onChange={(event)=>this.changeBrand(event, \"model\")}/></label>\r\n                <br/>\r\n                <label>Прайс<input name={\"price\"}  onChange={(event)=>this.changeBrand(event, \"price\")}/></label>\r\n                <br/>\r\n                <label>Статус<input type={\"radio\"} name={\"status\"} value={\"0\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    В пути  <input type={\"radio\"} name={\"status\"} value={\"1\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    На складе<input type={\"radio\"} name={\"status\"} value={\"2\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    Продан<input type={\"radio\"} name={\"status\"} value={\"3\"} onChange={(event)=>this.changeBrand(event, \"status\")}/>\r\n                    Снят с продажи\r\n                </label>\r\n                <br/>\r\n                <label>Пробег<input name={\"milage\"} onChange={(event)=>this.changeBrand(event, \"milage\")}/></label>\r\n                <br/>\r\n                <button onClick={(event)=>this.update(event)}>Сохранить</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    delProduct(id) {\r\n        fetch(\"/delete/\"+id)\r\n        this.updateList()\r\n\r\n       }\r\n  async  updateList() {\r\n      let res  = await fetch(\"/list\")\r\n      let json = await res.json()\r\n      this.setState({data: json.product_list, update:this.state.update+1})\r\n    }\r\n\r\n    changeBrand(e, state) {\r\n        switch (state) {\r\n            case \"brand\"       : this.setState({brand: e.target.value });\r\n                break;\r\n            case \"model\": this.setState({model: e.target.value });\r\n                break;\r\n            case \"price\" : this.setState({price: e.target.value });\r\n                break;\r\n            case \"status\"    : this.setState({status: e.target.value });\r\n                break;\r\n            case \"milage\"    : this.setState({milage: e.target.value });\r\n                break;\r\n            case \"id\"    : this.setState({id: e.target.value });\r\n                break;\r\n        }\r\n    }\r\n   async save(e) {\r\n        e.preventDefault()\r\n        delete this.state.data\r\n        let body = this.state;\r\n        let j = JSON.stringify(this.state)\r\n\r\n        let res = await fetch(\"/new\", {\r\n            body: j,\r\n            method: \"POST\"\r\n        })\r\n        let js = await res.json()\r\n        alert(js.status)\r\n\r\n        this.updateList()\r\n    }\r\n    async update(e) {\r\n        e.preventDefault()\r\n        delete this.state.data\r\n        let body = this.state;\r\n        let j = JSON.stringify(this.state)\r\n        let res = await fetch(\"/put\", {\r\n            body: j,\r\n            method: \"POST\"\r\n        })\r\n        let js = await res.json()\r\n        alert(js.status)\r\n        this.updateList()\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport List from \"./List.js\";\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {page: \"main\", list: []}\n\n  }\n componentDidMount() {\n    this.loadData()\n  }\n\n render() {\n      if (this.state.page === \"download\") {\n          return( <div className=\"App\">\n              <List data = {this.state.list} update = {this.loadData}/>\n          </div>)\n      } else {\n          return (<div className=\"App\">Загрузка</div>)\n      }\n\n  }\n async  loadData() {\n     let response =await fetch('/list')\n     let json = await response.json()\n     this.changeState(json)\n\n  }\n changeState(json) {\n      console.log(json)\n      this.setState({page: \"download\", list: json.product_list})\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}